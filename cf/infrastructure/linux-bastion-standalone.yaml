Description: >
  This templates deploys a linux bastion (ssh endpoint) inside provided VPC
  with two public subnets. The bastion will have an auto-scaling group.
  It will also create a log group

  Inspired by following example:
Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

    InstanceType:
        Description: Which Instance Type should be running the bastion
        Type: String
        Default: t2.nano
        AllowedValues:
          - t2.nano
          - t2.micro
          - t2.small

    VPC:
        Description: Choose which VPC these bastion hosts hould be deployed to
        Type: AWS::EC2::VPC::Id

    PublicSubnet:
        Description: Choose which public subnet these bastion hosts hould be deployed to
        Type: AWS::EC2::Subnet::Id

    SecurityGroup:
        Description: Select the Security Group that gives SSH Access
        Type: AWS::EC2::SecurityGroup::Id

    KeyPairName:
        Description: "Pub/Priv key pairs to allow a secure connection to the instance"
        Type: AWS::EC2::KeyPair::KeyName

Mappings:

    # These are the latest ECS optimized AMIs as of Jul 2018:
    #The current Amazon ECS-optimized AMI (amzn-ami-2018.03.a-amazon-ecs-optimized) consists of:
    # The latest minimal version of the Amazon Linux AMI
    # Amazon ECS container agent (1.18.0)
    # Docker for the latest Amazon ECS container agent (17.12.1-ce)
    # ecs-init package to run and monitor the Amazon ECS agent (1.18.0-1)
    #
    # You can find the latest available on this page of our documentation:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html
    # (note the AMI identifier is region specific)
    AWSRegionToAMI:
        eu-west-3:
            AMI: ami-ca75c4b7 
        eu-west-2:
            AMI: ami-3622cf51
        eu-west-1:
            AMI: ami-c91624b0
        eu-central-1:
            AMI: ami-10e6c8fb

Resources:
  BastionMainLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
  
  SSHMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
        LogGroupName: !Ref BastionMainLogGroup
        FilterPattern: "ON FROM USER PWD"
        MetricTransformations:
          - MetricName: ssh_cmd_count
            MetricValue: '1'
            MetricNamespace: !Join ["/", ["BastionHost", !Ref 'AWS::StackName']]

  SSHInvalidUser:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref BastionMainLogGroup
      FilterPattern: "[Mon, day, timestamp, ip, id, status = Invalid, ...]"
      MetricTransformations:
        - MetricName: ssh_invalid_user
          MetricValue: '1'
          MetricNamespace: SSH

  BastionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action: 
              - sts:AssumeRole
      Path: "/"
      Policies:
        -
          PolicyName: bastion-s3-access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: 
                  - s3:GetObject
                Resource: "*"
        -
          PolicyName: bastion-eip-access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - ec2:AssociateAddress
                  - ec2:DescribeAddresses
                Resource: "*"
        -
          PolicyName: bastion-log-access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:GetLogEvents
                  - logs:PutLogEvents   
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutRetentionPolicy
                  - logs:PutMetricFilter
                  - logs:CreateLogGroup
                Resource: 
                  - !Join ["", ["arn:aws:logs:", !Ref 'AWS::Region', ":", !Ref 'AWS::AccountId', ":log-group:", !Ref BastionMainLogGroup]]
                  - !Join ["", ["arn:aws:logs:", !Ref 'AWS::Region', ":", !Ref 'AWS::AccountId', ":log-group:", !Ref BastionMainLogGroup, ":*:*"]]


  BastionHostProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: 
        - !Ref BastionRole
      Path: "/"

  ElasticIp:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  BastionHost:
    Type: AWS::EC2::Instance
    Metadata: 
      AWS::CloudFormation::Init: 
        config: 
          packages: 
            yum:
              epel-release: []
              python27-pip: []
              python36-pip: []
              awslogs: []
          sources: 
            :
          files:

              "/etc/awslogs/awscli.conf": 
                content:  !Sub | 
                  [plugins]
                  cwlogs = cwlogs
                  [default],
                  region = {AWS::Region}
                mode: "000444"
                owner: "root"
                group: "root"
            "/etc/awslogs/awslogs.conf":
              content: !Sub |
                [general]
                state_file= /var/awslogs/agent-state
                [/var/log/secure]
                file = /var/log/secure
                log_group_name = ${BastionMainLogGroup}
                log_stream_name = {instance_id}/ssh.log
                datetime_format = %d/%b/%Y:%H:%M:%S
              mode: '000400'
              owner: "root"
              group: "root"
            "/etc/cfn/cfn-hup.conf":
              content: !Sub |
                [main]
                stack= ${AWS::StackId}
                region=${AWS::Region}
              mode: "000400"
              owner: "root"
              group: "root"
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.BastionHost.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource BastionHost --region ${AWS::Region}
          commands: 
            installawscli:
              command: "pip install awscli --ignore-installed six"
              ignoreErrors: true
    Properties: 
      SubnetId: !Ref PublicSubnet 
      KeyName: !Ref KeyPairName
      ImageId:  !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", AMI]
      InstanceType: !Ref InstanceType
      SecurityGroups:
          - !Ref SecurityGroup
      IamInstanceProfile: !Ref BastionHostProfile
      UserData:
        "Fn::Base64": !Sub |
            #!/bin/bash
            # Get the latets cf package
            yum update -y aws-cfn-bootstrap
            set -x
            EIP_LIST="${ElasticIp}"
            CLOUDWATCHGROUP=${BastionMainLogGroup}
            # Start cfn-init
            /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource BastionHost
            # Start cfn-up daemon - listens to changes for the instances metadata
            /opt/aws/bin/cfn-hup &> /dev/null
            # enable cloudwatch logs agent
            systemctl start awslogsd
            systemctl enable awslogsd.service
            # All done, sending signal
            /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource BastionHost
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-bastion-amazonlinux"
          PropagateAtLaunch: true
        - Key: CreatedBy
          Value: Cloudformation
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
  
Outputs: 
  ElasticIp:
      Description: Elastic IP for the bastion
      Value: !Ref ElasticIp

  CloudWatchLogs:
    Description: CloudWatch Logs GroupName. SSH Logs will be stored here
    Value: !Ref BastionMainLogGroup

